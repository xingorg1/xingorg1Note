(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{321:function(t,_,v){t.exports=v.p+"assets/img/renderTree.9fdbf19b.png"},322:function(t,_,v){t.exports=v.p+"assets/img/visibility.af320558.png"},323:function(t,_,v){t.exports=v.p+"assets/img/resize-reflow.628fbf40.gif"},324:function(t,_,v){t.exports=v.p+"assets/img/fontweight-reflow.8986c6f7.gif"},325:function(t,_,v){t.exports=v.p+"assets/img/repaintSwitch.444cf8b6.png"},339:function(t,_,v){"use strict";v.r(_);var r=v(1),s=Object(r.a)({},function(){var t=this,_=t.$createElement,r=t._self._c||_;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"为什么操作-dom-会影响网页性能？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么操作-dom-会影响网页性能？"}},[t._v("¶")]),t._v(" 为什么操作 DOM 会影响网页性能？")]),t._v(" "),r("h2",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("¶")]),t._v(" 前言")]),t._v(" "),r("p",[t._v("面试官经常会问你：“平时工作中，你怎么优化自己应用的性能？”"),r("br"),t._v("\n你回答如下：“我平时遵循以下几条原则来优化我的项目、以提高性能，主要有：”"),r("br"),t._v("\na. 减少 DOM 操作的次数（减少 DOM 的获取与修改次数）"),r("br"),t._v("\nb. 减少网络请求"),r("br"),t._v("\nc. 压缩、合并静态资源文件（css、js、img 等）"),r("br"),t._v("\nd. 小图片文件 base64 化处理"),r("br"),t._v("\ne. js 少用全局变量"),r("br"),t._v("\nf. ...")]),t._v(" "),r("p",[t._v("Bingo！此时，你给自己抛了个可以把自己埋住的大坑。"),r("br"),t._v("\n因为面试官可能会追问你：“为什么减少 DOM 操作可以提高性能？”")]),t._v(" "),r("p",[t._v("为什么呢？")]),t._v(" "),r("hr"),t._v(" "),r("h2",{attrs:{id:"_1、dom-是什么？es-和-dom-是什么关系？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、dom-是什么？es-和-dom-是什么关系？"}},[t._v("¶")]),t._v(" 1、dom 是什么？ES 和 DOM 是什么关系？")]),t._v(" "),r("p",[r("code",[t._v("DOM")]),t._v("就是"),r("code",[t._v("Document Object Model")]),t._v("，文档对象模型，里边是接口，即方法函数。我们通过调用并传指定参数来使用。"),r("br"),t._v("\n官方定义：DOM 是一个独立于语言的、用于操作 XML 和 HTML 文档的程序接口(API)。在浏览器中主要用于与 HTML 文档打交道，并且使用 DOM API 用来访问文档中的数据。"),r("br"),t._v("\nDOM 是个与 ES 语言无关的 API，它在浏览器中的接口却是用 JavaScript 来实现的，DOM 就成了现在 JS 编码中的重要部分。")]),t._v(" "),r("h3",{attrs:{id:"_1-1、各大浏览器中，dom-的位置和-javascript-的位置（渲染引擎与-js-引擎相互独立）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、各大浏览器中，dom-的位置和-javascript-的位置（渲染引擎与-js-引擎相互独立）"}},[t._v("¶")]),t._v(" 1-1、各大浏览器中，DOM 的位置和 JavaScript 的位置（渲染引擎与 JS 引擎相互独立）")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",{staticStyle:{"text-align":"center"}},[t._v("浏览器")]),t._v(" "),r("th",[t._v("JS 位置")]),t._v(" "),r("th",[t._v("DOM 位置")])])]),t._v(" "),r("tbody",[r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("IE")]),t._v(" "),r("td",[t._v("JavaScript 的实现名为 JScript，位于 jscript.dll 文件中")]),t._v(" "),r("td",[t._v("DOM 的实现则存在另一个库中，名为 mshtml.dll（内部称为 trident）")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("safari")]),t._v(" "),r("td",[t._v("JavaScript 部分是由独立的 SquirelFish 引擎来实现。")]),t._v(" "),r("td",[t._v("DOM 和渲染是使用 webkit 中的 webcore 实现")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("google chrome")]),t._v(" "),r("td",[t._v("JavaScript 引擎是他们自己研发的，名为 V8。")]),t._v(" "),r("td",[t._v("使用 webkit 中的 webCore 库来渲染页面")])]),t._v(" "),r("tr",[r("td",{staticStyle:{"text-align":"center"}},[t._v("firefox")]),t._v(" "),r("td",[t._v("JavaScript 引擎名为 TraceMonkey")]),t._v(" "),r("td",[t._v("渲染引擎 Gecko")])])])]),t._v(" "),r("h3",{attrs:{id:"_1-2、es-和-dom-是两种东西"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、es-和-dom-是两种东西"}},[t._v("¶")]),t._v(" 1-2、ES 和 DOM 是两种东西")]),t._v(" "),r("p",[t._v("ES 通多 DOM 接口来获取文档中的元素。"),r("br"),t._v("\n正因为浏览器中通常把 DOM 和 ECMAScript 独立实现。使得"),r("strong",[t._v("二者相互独立")]),t._v("，就像两座孤岛。"),r("br"),t._v("\n所以 ES 每次操作 DOM 时，ES 和 DOM 之间就像两个桥之间需要过车辆。"),r("br"),t._v("\n每次链接就都需要搭建一个桥梁，搭桥还是小事，ES 请求 DOM 的车辆过桥时，会经过一个收费站，每次都会被收费。JS 引擎会消耗浏览器的性能进行缴费。"),r("br"),t._v("\n而车辆通过后桥就销毁，下次链接重新搭桥二次缴费。所以说"),r("strong",[t._v("JS 与 DOM 每次连接都需要消耗性能")]),t._v(" 。"),r("br"),t._v("\n也正因此，有了"),r("strong",[t._v("每操作一次 DOM 就多做点事")]),t._v("的理念，尽可能以最少的次数处理最多的 DOM 操作，以实现每过一次桥多拉点货的效果。"),r("br"),t._v("\n（VUE 也正是这种理念，操作虚拟 dom 减少性能消耗，因此 vue 性能更优，另个话题来说。）")]),t._v(" "),r("h2",{attrs:{id:"_2、es-每次访问-dom-都需要消耗性能："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、es-每次访问-dom-都需要消耗性能："}},[t._v("¶")]),t._v(" 2、ES 每次访问 DOM 都需要消耗性能：")]),t._v(" "),r("p",[t._v("正因为二者相互独立，所以每次链接、每次访问 DOM 都会消耗性能！！ 可以说操作 dom 是十分昂贵的！！宁可处理一万次 js，也不操作一次 dom！！")]),t._v(" "),r("h2",{attrs:{id:"_3、es-每次修改-dom-元素的代价则更为昂贵"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、es-每次修改-dom-元素的代价则更为昂贵"}},[t._v("¶")]),t._v(" 3、ES 每次修改 DOM 元素的代价则更为昂贵")]),t._v(" "),r("p",[t._v("像上边说的，每次操作 DOM 之前，就会先"),r("strong",[t._v("访问 DOM")]),t._v("，所以也会消耗性能。"),r("br"),t._v("\n在此基础上，因为"),r("strong",[t._v("修改 DOM")]),t._v("会导致浏览器重新计算页面的几何变化、引发浏览器模板引擎的"),r("strong",[t._v("重排")]),t._v("(回流 - 回滚流程)和"),r("strong",[t._v("重绘")]),t._v("，进而更加消耗性能。")]),t._v(" "),r("h2",{attrs:{id:"_4、浏览器渲染引擎的工作原理、工作流程是什么？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、浏览器渲染引擎的工作原理、工作流程是什么？"}},[t._v("¶")]),t._v(" 4、浏览器渲染引擎的工作原理、工作流程是什么？")]),t._v(" "),r("p",[t._v("浏览器下载完页面中的所有资源（比如 HTML、JavaScript、CSS、图片等）后，会发生如下的 6 步过程：")]),t._v(" "),r("ol",[r("li",[t._v("解析 HTML，构建 DOM 树（DOM Tree）")]),t._v(" "),r("li",[t._v("解析 CSS，生成 CSS 规则树（CSSOM Tree）")]),t._v(" "),r("li",[t._v("合并 DOM 树和 CSS 规则树，生成渲染树 render 树（render Tree）")]),t._v(" "),r("li",[t._v("布局 render 树，根据生成的 render 树来对各元素尺寸、位置进行计算，得到每个节点的几何信息。（根据视口的大小来计算元素的位置和大小）（重排会走这一步）")]),t._v(" "),r("li",[t._v("绘制 render 树，绘制页面像素信息（根据 render 树上每个节点的几何信息，得到每个节点的像素数）（重绘会走这一步）")]),t._v(" "),r("li",[t._v("浏览器会将各层节点的像素信息发送给 GPU，GPU 将各层合成、绘制展示到页面上")])]),t._v(" "),r("h3",{attrs:{id:"_4-1、浏览器渲染引擎是如何生成渲染树（render-tree）的？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1、浏览器渲染引擎是如何生成渲染树（render-tree）的？"}},[t._v("¶")]),t._v(" 4-1、浏览器渲染引擎是如何生成渲染树（render Tree）的？")]),t._v(" "),r("p",[t._v("先看一张图："),r("br"),t._v(" "),r("img",{attrs:{src:v(321),alt:"浏览器如何生成渲染树",title:"浏览器如何生成渲染树"}})]),t._v(" "),r("p",[t._v("由上图得知如下流程：")]),t._v(" "),r("ol",[r("li",[t._v("从 DOM Tree 的根节点开始遍历每一个可见节点（除 meta、link、script 等这些标签；除 display:none;的元素）")]),t._v(" "),r("li",[t._v("对于每个可见节点，在 CSSOM 中找到对应规则并将样式规则应用到对应节点上。")]),t._v(" "),r("li",[t._v("根据每一个可见节点，以及其对应的样式，组合生成渲染树。")])]),t._v(" "),r("p",[r("strong",[t._v("不可见节点：")]),t._v(" 不会渲染输出的节点（不会显示在屏幕上的节点）有以下几种")]),t._v(" "),r("ul",[r("li",[t._v("meta、link、script 等标签;")]),t._v(" "),r("li",[t._v("通过 css 进行隐藏的节点，即 display:none；（opacity 对人类不可见，计算机还能看见，所以还会渲染。）（那 visibility 为隐藏的元素会不会被渲染呢？做个试验，一个 div 设置 visibility 不可见，左浮动，周围全是文字，看文字环绕是否让出一块空白区域。最后试验证明确实绕出了一段空白的位置，说明 visibility 和 opacity 设置的不可见只是对人类肉眼不可见，计算机还是会在生成 render Tree 的时候计算位置信息并把他绘制出来。试验结果如下图：）")])]),t._v(" "),r("p",[r("img",{attrs:{src:v(322),alt:"visibility为隐藏的元素会不会被渲染",title:"visibility为隐藏的元素会不会被渲染"}})]),t._v(" "),r("h2",{attrs:{id:"_5、什么是浏览器渲染引擎的重排和重绘？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、什么是浏览器渲染引擎的重排和重绘？"}},[t._v("¶")]),t._v(" 5、什么是浏览器渲染引擎的重排和重绘？")]),t._v(" "),r("h3",{attrs:{id:"_5-1、重排"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-1、重排"}},[t._v("¶")]),t._v(" 5-1、"),r("strong",[t._v("重排")])]),t._v(" "),r("p",[t._v("当 DOM 的变化影响了元素的几何属性（宽和高），浏览器需要重新计算元素的几何属性，同样其他相邻元素的几何属性和"),r("strong",[t._v("位置")]),t._v("也会因此受到影响。浏览器会使渲染树中受到影响的部分失效，并重新构造渲染树。这个过程称为“重排”。")]),t._v(" "),r("p",[t._v("换句话说，改变了页面中某元素的位置、尺寸大小，进而也就改变了他的占地面积。那这个元素修改了占地面积后，其后紧邻的元素就得挪动位置。给她让地儿（或者向前赶赶）。紧邻的元素挪动了，那紧邻元素后边的元素也会连锁效应式的修改。这就好比一排人排队。前边的人突然变胖了、变瘦了、向前挪了、向后挤了、都会导致队伍中后边的人也跟随之改变位置，由此导致一连串的人都挪动位置。这时浏览器就要重新排版各个受到影响的元素的位置。反应在渲染引擎的工作流程中也就是浏览器需要重新计算元素位置信息并布局 render 树。这就是"),r("strong",[t._v("重排")]),t._v("。")]),t._v(" "),r("h3",{attrs:{id:"_5-2、重绘"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-2、重绘"}},[t._v("¶")]),t._v(" 5-2、"),r("strong",[t._v("重绘")])]),t._v(" "),r("p",[t._v("完成重排后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为"),r("strong",[t._v("重绘")]),t._v("。"),r("br"),t._v("\n因为重排在重绘的上一步，所以"),r("strong",[t._v("重排发生后自然会导致重绘")]),t._v("。这个很好理解。")]),t._v(" "),r("h2",{attrs:{id:"_6、什么时候会引发重排？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、什么时候会引发重排？"}},[t._v("¶")]),t._v(" 6、什么时候会引发重排？")]),t._v(" "),r("p",[t._v("当页面布局和几何属性改变时就需要重排："),r("br"),t._v("\n（核心就是：只要某个属性能导致位置信息发生改变，就会触发重排 ）")]),t._v(" "),r("ol",[r("li",[t._v("添加或删除可见的 DOM 元素。(一堆人排队，添加即中间插入了一个人/删除即中间一个人走了，势必会影响后边排队的人的位置信息也发生改变)")]),t._v(" "),r("li",[t._v("元素位置改变（重排就是因为位置信息改变了）")]),t._v(" "),r("li",[t._v("元素尺寸改变( 外边距、内边距、边框厚度、宽度、高度等)")]),t._v(" "),r("li",[t._v("内容改变，例：文本数量/内容改变、或图片被另一个不同尺寸的图片替代、字体大小改变、（文字加粗？）导致 DOM 元素位置、面积改变。【计算会消耗 CPU 的能力】")]),t._v(" "),r("li",[t._v("页面渲染器初始化（这算重走流程吧，肯定要重排）")]),t._v(" "),r("li",[t._v("浏览器窗口尺寸改变（位置信息会被迫调整，发生重排。见下图的 gif 图，一个页面中 div 元素的位置不受视口调整而修改，也会引发重排）【消耗 GPU 的计算能力】")])]),t._v(" "),r("p",[t._v("试验：resize 视口，一个页面中 div 元素的位置不受视口调整而修改，也会引发重排"),r("br"),t._v(" "),r("img",{attrs:{src:v(323),alt:"resize视口会引发重排 ",title:"resize视口会引发重排"}})]),t._v(" "),r("h2",{attrs:{id:"_7、打断浏览器的优化步骤"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7、打断浏览器的优化步骤"}},[t._v("¶")]),t._v(" 7、打断浏览器的优化步骤")]),t._v(" "),r("p",[t._v("现代浏览器是相当完善的了，因为多次操作 DOM 会触发重排重绘、消耗性能。所以除了我们人为的、有意识的去控制操作 DOM 次数以外，浏览器在设计上进行了优化，也会智能的“节流”操作 DOM，比如实现队列化修改、批量执行。")]),t._v(" "),r("p",[t._v('解释来说就是，浏览器会有一个“队列”，用以存放（攒着）需要操作 DOM 的 js 程序。每当执行一次 js 操作 dom 的代码，这个队列里就先暂存一个程序。等到一段时间后，浏览器再集中、批量的链接一次"ES 岛"和"DOM 岛"（就是让 JS 引擎去链接渲染引擎），进而触发一次 DOM 操作。你可以形象的理解为“过一段时间发一班车”。')]),t._v(" "),r("p",[t._v("但是我们人类感知不到啊，可能会因为误操作打断浏览器的“节流”步骤。迫使浏览器中断当前的“等待”，去赶紧、立马进行一次 dom 操作。让浏览器赶紧执行完他攒在“队列”里的 JS 操作 DOM 的程序后返回最新的 DOM 位置信息给我们。这就好像电梯门定时自动关闭，但是你却手动按了关门按钮强迫关门一样。")]),t._v(" "),r("p",[t._v("这种情况就发生在我们获取 DOM 信息的时候：")]),t._v(" "),r("p",[r("strong",[t._v("打断浏览器优化，强迫触发重排的属性：")]),r("br"),t._v("\noffsetTop、offsetLeft、offsetWidth、offsetHeight"),r("br"),t._v("\nscrollTop、scrollLeft、scrollWidth、scrollHeight"),r("br"),t._v("\nclientTop、clientLeft、clientWidth、clientHeight"),r("br"),t._v("\ngetComputedStyle()")]),t._v(" "),r("p",[t._v("因为要跟浏览器请求最新的 DOM 信息，所以浏览器就得赶紧让 JS 引擎去渲染引擎那里进行一次 DOM 操作。")]),t._v(" "),r("h2",{attrs:{id:"_8、什么时候会引发重绘？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8、什么时候会引发重绘？"}},[t._v("¶")]),t._v(" 8、什么时候会引发重绘？")]),t._v(" "),r("ol",[r("li",[r("strong",[t._v("重排必然引发重绘")]),t._v("，这是肯定的。因为浏览器的工作流程就是排版后渲染。重排会回流（回滚流程）到排版阶段，排版后需要重新绘制页面。")]),t._v(" "),r("li",[t._v("单独触发重绘的情况："),r("br"),t._v("\n除元素尺寸、位置发生改变以外的情况，（比如字体颜色、背景色等发生改变）。（我怀疑文字加粗也会触发重排，但是我没有证据。理论上来说如果在一个固定尺寸的 div 内加粗文字，应该不会影响后边元素的重排，但可能该 div 内部的其他相邻文字或元素会发生重排。）")])]),t._v(" "),r("p",[t._v("试验 gif 图："),r("br"),t._v(" "),r("img",{attrs:{src:v(324),alt:"文字加粗会引发重排 ",title:"文字加粗会引发重排"}})]),t._v(" "),r("p",[t._v("（想到一个验证只发生重绘的情况，那就是后边也加点元素，如果重排了，后边的元素在控制台的检测下也会闪绿光。）")]),t._v(" "),r("h2",{attrs:{id:"_9、为什么不提倡重排和重绘？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9、为什么不提倡重排和重绘？"}},[t._v("¶")]),t._v(" 9、为什么不提倡重排和重绘？")]),t._v(" "),r("p",[t._v("既然知道了这个 dom 操作会触发重排、重绘。那又是为什么要尽量避免重排和重绘呢？"),r("br"),t._v("\n换句话说，重排和重绘的副作用是什么？缺点是什么？")]),t._v(" "),r("p",[t._v("这就要引入 CPU 和 GPU 了。")]),t._v(" "),r("p",[r("strong",[t._v("重排会占用 CPU")]),t._v("，dom 元素位置计算会消耗 CPU 的算力，所以应该尽量减少 CPU 的占用，使电脑不卡顿。"),r("br"),t._v(" "),r("strong",[t._v("重绘会占用 GPU")]),t._v("，渲染页面时会消耗 GPU 的算力。")]),t._v(" "),r("p",[r("strong",[t._v("GPU 的分类：")])]),t._v(" "),r("ol",[r("li",[t._v("家用 GPU"),r("br"),t._v("\n适合做贴图、特效、光影等效果。不适合画图形。")]),t._v(" "),r("li",[t._v("专业 GPU"),r("br"),t._v("\n适合画图形。不适合做贴图、特效、光影等效果。")])]),t._v(" "),r("p",[t._v("DOM 操作基本就是画图形的，但浏览器中用的就是"),r("strong",[t._v("家用 GPU，其画图形耗费的性能是专业 GPU 的几十倍")]),t._v("。所以不提倡频繁用装有家用 GPU 的浏览器绘制页面。也就是不提倡频繁触发重绘。")]),t._v(" "),r("h2",{attrs:{id:"_10、总结：-为什么操作-dom-非常昂贵？"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10、总结：-为什么操作-dom-非常昂贵？"}},[t._v("¶")]),t._v(" 10、总结： 为什么操作 DOM 非常昂贵？")]),t._v(" "),r("ol",[r("li",[t._v("ES 和 DOM 是两种东西，每次连接都需要消耗性能")]),t._v(" "),r("li",[t._v("操作 DOM 会导致重排和重绘，重排会占用、消耗 CPU; 重绘会占用、消耗 GPU")])]),t._v(" "),r("h2",{attrs:{id:"_11、控制台观察一个页面的重排和重绘现象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_11、控制台观察一个页面的重排和重绘现象"}},[t._v("¶")]),t._v(" 11、控制台观察一个页面的重排和重绘现象")]),t._v(" "),r("p",[t._v("因为重排必然会引发重绘，所以在浏览器的开发者工具中提供了一个检测重绘的按钮。寻找和打开步骤如下图："),r("br"),t._v(" "),r("img",{attrs:{src:v(325),alt:"控制台开启重绘检测按钮",title:"控制台开启重绘检测按钮"}})]),t._v(" "),r("h4",{attrs:{id:"各-css-属性对重排重绘的影响：https-csstriggers-com"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#各-css-属性对重排重绘的影响：https-csstriggers-com"}},[t._v("¶")]),t._v(" 各 css 属性对重排重绘的影响：https://csstriggers.com/")]),t._v(" "),r("Vssue",{attrs:{title:"为什么操作DOM会影响网页性能？"}})],1)},[],!1,null,null,null);_.default=s.exports}}]);